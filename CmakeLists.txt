cmake_minimum_required(VERSION 3.00)

INCLUDE("esp32_common.cmake")
###################################################################################
#    CONFIGURATION
#    
###################################################################################
set(POJECT_NAME             ArduinoExample)
set(ESP_FLASH_COMPORT       "COM29")


# Add the Toolchain File
set ( CMAKE_TOOLCHAIN_FILE          CmakeToolchain.txt)
# set the project name
project(${POJECT_NAME})

get_property(LIB_SRC_LIST_ALL GLOBAL PROPERTY source_list)
set_property(GLOBAL PROPERTY source_list_libs)


if(CMAKE_ESP_DEFINITION_DONE MATCHES "DISABLED")
    message(FATAL_ERROR,"*********************** !!! Board Not supported ,or not defined !!!!  :( !!!  ")
else()
    message(INFO " ")
    message(INFO " ****************************************************************************************************************************** " )
    message(INFO " ****************************************************************************************************************************** " )
    message(INFO " ** SYSTEM_NAME            =" ${CMAKE_SYSTEM_NAME})
    message(INFO " ** PROCESSOR_NAME         =" ${CMAKE_SYSTEM_PROCESSOR})
    message(INFO " **<<<<<<<<<<<<<<<<<<<<<  BOARD SETTINGS & PROGRAMMER >>>>>>>>>>>>>>>>>>>>>>>>> ")
    message(INFO " ** BoardDetected          =" ${CMAKE_SYSTEM_BOARD})
    message(INFO " ** Boot Binary            =" ${ESP_BOOT_BIN})
    message(INFO " ** Bootloader             =" ${ESP_BL_BIN})
    message(INFO " ** Programmber BaudRate   =" ${ESP_P_BRATE})
    message(INFO " **<<<<<<<<<<<<<<<<<<<<<  TOOLCHAIN INFO >>>>>>>>>>>>>>>>>>>>>>>>> ")
    message(INFO " ** TOOLCHAIN_PATH         =" ${ESP32_TOOLCHAIN_PATH})
    message(INFO " ** C_COMPILER             =" ${CMAKE_C_COMPILER})
    message(INFO " ** CXX_COMPILER           =" ${CMAKE_CXX_COMPILER})
    message(INFO " ** BOARD_CONFIG           =" ${ESP32_ARDUINO_BOARD_CONFIGS})
    message(INFO " ** DEBUG                  =" ${OPTIMIZ_FLAGS})
    message(INFO " ********************************************************************************************************************************** " )
    message(INFO " ********************************************************************************************************************************** " )
    message(INFO " ")
endif(CMAKE_ESP_DEFINITION_DONE MATCHES "DISABLED")


#-----------------------------------------------
#   USER  CODE HERE
#-----------------------------------------------
FILE(GLOB CPP_SOURCES source/*.cpp)
FILE(GLOB CPP_HEADS *.h)
FILE(GLOB C_SOURCES source/*.c)


#-----------------------------------------------
#   LIB SUPPORT AND CONFIGURATIONS
#-----------------------------------------------

# Add all the Includes required by the Arduino Core
add_arduino_Core_includes()

# Add and compile the Libs included in the SDK
#  add_ardu_lib( WiFi )
#  add_ardu_lib( WiFiClientSecure )

# Add and compile the Libs with a Custom PATH
#  add_arduino_external_lib(PubSubClient "./")

#########################################################
#  ADD THE TARGET
##########################################################
add_executable(${POJECT_NAME}   ${CPP_HEADS} ${C_SOURCES} ${CPP_SOURCES}  ${SRC_CODE_CORE} ${ASSEMBLER_FILE} )
set_target_properties(${POJECT_NAME} PROPERTIES SUFFIX ".elf" LINK_FLAGS "  ")





add_arduino_Core_Config(${POJECT_NAME})
add_link_lib(${POJECT_NAME}) 

    
add_arduino_Core_library(${POJECT_NAME}   gcc                     enable )
add_arduino_Core_library(${POJECT_NAME}   freertos                enable )
add_arduino_Core_library(${POJECT_NAME}   mesh                    enable )
add_arduino_Core_library(${POJECT_NAME}   od                      enable )
add_arduino_Core_library(${POJECT_NAME}   wear_levelling          enable )
add_arduino_Core_library(${POJECT_NAME}   fb_gfx                  enable )
add_arduino_Core_library(${POJECT_NAME}   esp_adc_cal             enable )
add_arduino_Core_library(${POJECT_NAME}   c_nano                  enable )
add_arduino_Core_library(${POJECT_NAME}   esp32                   enable )
add_arduino_Core_library(${POJECT_NAME}   driver                  enable )
add_arduino_Core_library(${POJECT_NAME}   hal                     enable )
add_arduino_Core_library(${POJECT_NAME}   jsmn                    enable )
add_arduino_Core_library(${POJECT_NAME}   smartconfig             enable )
add_arduino_Core_library(${POJECT_NAME}   esp_http_server         enable )
add_arduino_Core_library(${POJECT_NAME}   protocomm               enable )
add_arduino_Core_library(${POJECT_NAME}   face_recognition        enable )
add_arduino_Core_library(${POJECT_NAME}   espnow                  enable )
add_arduino_Core_library(${POJECT_NAME}   tcpip_adapter           enable )
add_arduino_Core_library(${POJECT_NAME}   face_detection          enable )
add_arduino_Core_library(${POJECT_NAME}   unity                   enable )
add_arduino_Core_library(${POJECT_NAME}   c                       enable )
add_arduino_Core_library(${POJECT_NAME}   libsodium               enable )
add_arduino_Core_library(${POJECT_NAME}   esp_http_client         enable )
add_arduino_Core_library(${POJECT_NAME}   app_update              enable )
add_arduino_Core_library(${POJECT_NAME}   newlib                  enable )
add_arduino_Core_library(${POJECT_NAME}   cxx                     enable )
add_arduino_Core_library(${POJECT_NAME}   tcp_transport           enable )
add_arduino_Core_library(${POJECT_NAME}   m                       enable )
add_arduino_Core_library(${POJECT_NAME}   efuse                   enable )
add_arduino_Core_library(${POJECT_NAME}   openssl                 enable )
add_arduino_Core_library(${POJECT_NAME}   wifi_provisioning       enable )
add_arduino_Core_library(${POJECT_NAME}   espcoredump             enable )
add_arduino_Core_library(${POJECT_NAME}   log                     enable )
add_arduino_Core_library(${POJECT_NAME}   mbedtls                 enable )
add_arduino_Core_library(${POJECT_NAME}   esp_ringbuf             enable )
add_arduino_Core_library(${POJECT_NAME}   wps                     enable )
add_arduino_Core_library(${POJECT_NAME}   net80211                enable )
add_arduino_Core_library(${POJECT_NAME}   mqtt                    enable )
add_arduino_Core_library(${POJECT_NAME}   esp_https_server        enable )
add_arduino_Core_library(${POJECT_NAME}   app_trace               enable )
add_arduino_Core_library(${POJECT_NAME}   esp_event               enable )
add_arduino_Core_library(${POJECT_NAME}   esp32-camera            enable )
add_arduino_Core_library(${POJECT_NAME}   soc                     enable )
add_arduino_Core_library(${POJECT_NAME}   heap                    enable )
add_arduino_Core_library(${POJECT_NAME}   lwip                    enable )
add_arduino_Core_library(${POJECT_NAME}   wpa                     enable )
add_arduino_Core_library(${POJECT_NAME}   rtc                     enable )
add_arduino_Core_library(${POJECT_NAME}   xtensa-debug-module     enable )
add_arduino_Core_library(${POJECT_NAME}   spi_flash               enable )
add_arduino_Core_library(${POJECT_NAME}   phy                     enable )
add_arduino_Core_library(${POJECT_NAME}   fr                      enable )
add_arduino_Core_library(${POJECT_NAME}   console                 enable )
add_arduino_Core_library(${POJECT_NAME}   coap                    enable )
add_arduino_Core_library(${POJECT_NAME}   btdm_app                enable )
add_arduino_Core_library(${POJECT_NAME}   sdmmc                   enable )
add_arduino_Core_library(${POJECT_NAME}   fd                      enable )
add_arduino_Core_library(${POJECT_NAME}   micro-ecc               enable )
add_arduino_Core_library(${POJECT_NAME}   json                    enable )
add_arduino_Core_library(${POJECT_NAME}   core                    enable )
add_arduino_Core_library(${POJECT_NAME}   protobuf-c              enable )
add_arduino_Core_library(${POJECT_NAME}   ethernet                enable )
add_arduino_Core_library(${POJECT_NAME}   spiffs                  enable )
add_arduino_Core_library(${POJECT_NAME}   nvs_flash               enable )
add_arduino_Core_library(${POJECT_NAME}   wpa_supplicant          enable )
add_arduino_Core_library(${POJECT_NAME}   vfs                     enable )
add_arduino_Core_library(${POJECT_NAME}   asio                    enable )
add_arduino_Core_library(${POJECT_NAME}   wpa2                    enable )
add_arduino_Core_library(${POJECT_NAME}   pp                      enable )
add_arduino_Core_library(${POJECT_NAME}   bootloader_support      enable )
add_arduino_Core_library(${POJECT_NAME}   image_util              enable )
add_arduino_Core_library(${POJECT_NAME}   dl_lib                  enable )
add_arduino_Core_library(${POJECT_NAME}   ulp                     enable )
add_arduino_Core_library(${POJECT_NAME}   nghttp                  enable )
add_arduino_Core_library(${POJECT_NAME}   pthread                 enable )
add_arduino_Core_library(${POJECT_NAME}   freemodbus              enable )
add_arduino_Core_library(${POJECT_NAME}   expat                   enable )
add_arduino_Core_library(${POJECT_NAME}   fatfs                   enable )
add_arduino_Core_library(${POJECT_NAME}   smartconfig_ack         enable )
add_arduino_Core_library(${POJECT_NAME}   mdns                    enable )
add_arduino_Core_library(${POJECT_NAME}   coexist                 enable )
add_arduino_Core_library(${POJECT_NAME}   esp-tls                 enable )
add_arduino_Core_library(${POJECT_NAME}   esp_https_ota           enable )
add_arduino_Core_library(${POJECT_NAME}   bt                      enable )
add_arduino_Core_library(${POJECT_NAME}   stdc++                  enable )





###########################################################################################
#   ENABLE FLASHING AND ESPTOOL SUPPORT
###########################################################################################
configure_esptool_function(${POJECT_NAME})
configure_esptool_flashing(${POJECT_NAME})



